<?php

/**
 * implements hook_cron()
 * creates a new node (tweet) each time cron is run.
 */
function bbitautotweet_cron() {
  $bodyText = "";
  
  // delete items that were created over 14 days ago
  $created = REQUEST_TIME - (86400 * 14);
  $result = db_query("delete from {node} where type = :type AND created <= :created", 
    array(':created' => $created, ':type' => 'bbit_auto_tweet'));

  //get a random update from the table
  // $query = "SELECT tweet FROM {bbitautotweet} ORDER BY RAND() LIMIT 1";
  // $result = db_query($query);
  $result = db_select('bbitautotweet', 'b')
    ->fields('b', array('tweet'))
    ->orderBy('RAND()')
    ->range(0, 1)
    ->execute();
  foreach($result as $record){
    $bodyText = $record->tweet;
  }

  //insert the type into the table
  $node = new stdClass();
  $node->type = 'bbit_auto_tweet';
  node_object_prepare($node);
  $node->title = $bodyText;
  $node->language = LANGUAGE_NONE;
  $node->body[$node->language][0]['value'] = $bodyText;
  $node->body[$node->language][0]['format'] = 'plain_text';
  $node->sticky = 0;
  $node->promote = 0;
  $node->comment = 0;
  $node->uid = 0;
  $path = 'status/' . date('YmdHis');
  $node->path = array('alias' => $path);
  node_save($node);

  if( date("D") == "SUN"){ //if today is Sunday, perform cleanup
    // $query = "SELECT nid FROM {node} WHERE created < (unix_timestamp() - 1209600) AND lower(type)='bbit_auto_tweet'";
    // $result = db_query($query); //get the tweets that are older than 14 days
    $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', 'bbit_auto_tweet', '=')
      ->condition('created', (unix_timestamp() - 1209600), '<')
      ->execute();
    foreach($result as $record){
      node_delete($record->nid); //delete each tweet that is older than 14 days
    }
  }
} // end function bbitautotweet_cron()

/**
 * implements hook_menu()
 */
function bbitautotweet_menu() {
  //creates an RSS feed that can be implemented by TwitterFeed.

  $items['rsstweets.xml'] = array(
    'title' => t(variable_get('site_name', '') . ' status updates.'),
    'page callback' => 'bbitautotweet_display_rss',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/bbitautotweet'] = array(
    'title' => 'BBIT Auto Tweet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbitautotweet_tweets_list_form'),
    'description' => 'Administer random tweets to be used by BBIT Auto Tweet',
    // 'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => array('administer autotweet'),
  );
  $items['admin/config/services/bbitautotweet/add'] = array(
    'title' => 'Add Auto Tweet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbitautotweet_admin_add_form'),
    'description' => 'Administer random tweets to be used by BBIT Auto Tweet',
    // 'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => array('administer autotweet'),
  );
  $items['admin/config/services/bbitautotweet/delete/%'] = array(
    'title' => 'Delete Auto Tweet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbitautotweet_admin_delete_form'),
    'description' => 'Administer random tweets to be used by BBIT Auto Tweet',
    // 'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => array('administer autotweet'),
  );

  return $items;
} // end function bbitautotweet_menu()

/**
 * implements hook_permission()
 */
function bbitautotweet_permission() {
  return array(
    'administer autotweet' => array(
      'title' => t('Administer BBIT Auto Tweet'),
    ),
  ); // end return array
} // end function bbitautotweet_permission()

/**
 * generates a RSS feed based upon the auto tweet nodes
 */
function bbitautotweet_display_rss() {
  $nodes = array();
  $nodeItem = 0;
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'bbit_auto_tweet', '=')
    ->orderBy('created', 'DESC')
    ->range(0, 10)
    ->execute();

  foreach($result as $record){
    $nodes[$nodeItem] = $record->nid; //add each node to the array
    $nodeItem++;
  }

  $rssChannel = array( //set attributes for the RSS feed
    'title' => t(variable_get('site_name','') . ' RSS Status Updates'),
    'link' => t(variable_get('base_url','')),
    'description' => t('Status updates for ' . variable_get('site_name','') . ' website for it\'s Facebook and Twitter pages.'),
    'items' => null, //$nodes,
    'langcode' => 'en',
  );

  return node_feed($nodes, $rssChannel);
} // end function bbitautotweet_display_rss()

/**
 * implements hook_form()
 */
function bbitautotweet_tweets_list_form() {
  drupal_set_title('BBIT Auto Tweets', CHECK_PLAIN);
  $header = array(
    array('data' => 'Tweet', 'field' => 'tweet', 'sort' => 'ASC'),
    array('data' => 'Actions'),
  );
  $rows = array();

  $results = db_select('bbitautotweet', 'bat')
    ->fields('bat', array('tweetid', 'tweet'))
    ->orderBy('tweetid', 'ASC', '=')
    ->execute();
  foreach($results as $row){
    $rows[] = array(
      t($row->tweet, array(), array()),
      l(t('Delete', array(), array()), 'admin/config/services/bbitautotweet/delete/' . $row->tweetid, array()),
    );
  }

  $form['add'] = array(
    '#prefix' => '<p>',
    '#markup' => l(t('Add Tweet', array(), array()), 'admin/config/services/bbitautotweet/add', array()),
    '#suffix' => '</p>',
  );
  $form['tweets'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No tweets have been entered.', array(), array()),
  );

  return $form;
} // end function bbitautotweet_tweets_list_form()


function bbitautotweet_admin_add_form() {
  $form['#method'] = 'post';
  $form['addTweet'] = array(
    '#type' => 'textfield',
    '#title' => t('Status Update and Tweet Text'),
    '#maxlength' => 140,
    '#required' => TRUE,
    '#description' => t('Enter a tweet that will randomly appear on Facebook, Twitter, and other social media pages.'),
   );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Tweet'),
  );

  return $form;
} // end function bbitautotweet_admin_add_form()

function bbitautotweet_admin_add_form_submit($form, &$form_state) {
  $insertID = db_insert('bbitautotweet') //add tweet to database
    ->fields(array(
        'tweet' => $form_state['values']['addTweet'],
    ))
    ->execute();

  drupal_set_message(t('The tweet/status update has been added and is immediately available for use.', array(), array()), 'status', TRUE);
  $form_state['redirect'] = 'admin/config/services/bbitautotweet';
} // end function bbitautotweet_admin_add_form_submit($form, &$form_state)

/**
 *
 * admin/config/services/bbitautotweet/delete/%
 */
function bbitautotweet_admin_delete_form() {
  $tweetid = arg(5, current_path());
  $form = array();

  $result = db_select('bbitautotweet', 'bat')
    ->fields('bat', array('tweetid', 'tweet'))
    ->condition('tweetid', $tweetid, '=')
    ->execute();

  if( $result->rowCount() == 1) {
    $tweetText = "";

    foreach($result as $row){
      $tweetText = $row->tweet;
    }

    $form['tweetid'] = array(
      '#type' => 'hidden',
      '#default_value' => $tweetid,
      '#required' => TRUE,
    );
    $form['tweetmsg'] = array(
      '#prefix' => t('<p>', array(), array()),
      '#markup' => t('<strong>Are you sure you want to delete the tweet:</strong><br /> ' . $tweetText, array(), array()),
      '#suffix' => t('</p>', array(), array()),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Delete', array(), array()),
    );
    $form['cancel'] = array(
      '#markup' => l(t('Cancel', array(), array()), 'admin/config/services/bbitautotweet', array()),
    );
  } // end if( $result->rowCount() == 1)
  else{
    drupal_set_message('Unexpected error occurred. Unable to determine the tweet.', 'error', TRUE);
    drupal_goto('admin/config/services/bbitautotweet');
  } // end else

  return $form;
} // end function bbitautotweet_admin_delete_form()

function bbitautotweet_admin_delete_form_submit($form, &$form_state) {
  db_delete('bbitautotweet')
    ->condition('tweetid', $form_state['values']['tweetid'], '=')
    ->execute();

  drupal_set_message('The tweet has been successfully deleted.', 'status', TRUE);
  $form_state['redirect'] = 'admin/config/services/bbitautotweet';
} // end function bbitautotweet_admin_delete_form_submit($form, &$form_state)

